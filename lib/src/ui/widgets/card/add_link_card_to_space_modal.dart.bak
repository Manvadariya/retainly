import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../bloc/add_card/add_card_bloc.dart';
import '../../../bloc/add_card/add_card_event.dart';
import '../../../bloc/add_card/add_card_state.dart';
import '../../../data/repository/card_repository.dart';
import '../../../data/card_entity.dart';

class AddLinkCardToSpaceModal extends StatefulWidget {
  final String? initialUrl;
  final bool autofocusSave;
  final int spaceId;

  const AddLinkCardToSpaceModal({
    super.key,
    this.initialUrl,
    this.autofocusSave = false,
    required this.spaceId,
  });

  @override
  State<AddLinkCardToSpaceModal> createState() =>
      _AddLinkCardToSpaceModalState();
}

class _AddLinkCardToSpaceModalState extends State<AddLinkCardToSpaceModal> {
  late final TextEditingController _urlController;
  late final TextEditingController _titleController;
  late final TextEditingController _descriptionController;
  final _formKey = GlobalKey<FormState>();
  bool _isSaveEnabled = false;
  bool _isAnalyzing = false;

  @override
  void initState() {
    super.initState();
    _urlController = TextEditingController(text: widget.initialUrl ?? '');
    _titleController = TextEditingController();
    _descriptionController = TextEditingController();

    _urlController.addListener(_validateInput);
    _titleController.addListener(_validateInput);

    if (widget.initialUrl != null && widget.initialUrl!.trim().isNotEmpty) {
      _analyzeLink();
    }
  }

  @override
  void dispose() {
    _urlController.removeListener(_validateInput);
    _titleController.removeListener(_validateInput);
    _urlController.dispose();
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  void _validateInput() {
    final hasUrl = _isValidUrl(_urlController.text.trim());
    final hasTitle = _titleController.text.trim().isNotEmpty;
    final isValid = hasUrl && hasTitle;

    if (isValid != _isSaveEnabled) {
      setState(() {
        _isSaveEnabled = isValid;
      });
    }
  }

  bool _isValidUrl(String url) {
    if (url.isEmpty) return false;
    final uri = Uri.tryParse(url);
    return uri != null && uri.hasScheme && uri.hasAuthority;
  }

  Future<void> _analyzeLink() async {
    final url = _urlController.text.trim();
    if (!_isValidUrl(url)) return;

    setState(() {
      _isAnalyzing = true;
    });

    try {
      // This is a placeholder for the actual link analysis functionality
      // In a real implementation, we would fetch metadata from the URL
      // For now, we'll just set a title if none exists
      if (_titleController.text.isEmpty) {
        _titleController.text = 'Link to ${Uri.parse(url).host}';
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error analyzing link: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isAnalyzing = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => AddCardBloc(
        cardRepository: RepositoryProvider.of<CardRepository>(context),
      ),
      child: BlocListener<AddCardBloc, AddCardState>(
        listener: (context, state) {
          if (state is AddCardSuccess) {
            Navigator.of(context).pop(true);
          } else if (state is AddCardError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Error: ${state.message}'),
                backgroundColor: Colors.red,
                behavior: SnackBarBehavior.floating,
              ),
            );
          }
        },
        child: BlocBuilder<AddCardBloc, AddCardState>(
          builder: (context, state) {
            return Container(
              padding: EdgeInsets.only(
                bottom: MediaQuery.of(context).viewInsets.bottom,
              ),
              decoration: const BoxDecoration(
                color: Color(0xFF1A1A1A),
                borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
              ),
              child: Form(
                key: _formKey,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    _buildHeader(),
                    _buildTextForm(),
                    _buildFooter(state),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: const BoxDecoration(
        border: Border(bottom: BorderSide(color: Color(0xFF303030), width: 1)),
      ),
      child: Row(
        children: [
          const Icon(Icons.link, color: Colors.white),
          const SizedBox(width: 16),
          const Text(
            'Add Link to Space',
            style: TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.w600,
            ),
          ),
          const Spacer(),
          IconButton(
            icon: const Icon(Icons.close, color: Colors.white70),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    );
  }

  Widget _buildTextForm() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          TextFormField(
            controller: _urlController,
            keyboardType: TextInputType.url,
            style: const TextStyle(color: Colors.white),
            decoration: InputDecoration(
              labelText: 'URL',
              labelStyle: const TextStyle(color: Colors.grey),
              border: const OutlineInputBorder(),
              focusedBorder: const OutlineInputBorder(
                borderSide: BorderSide(color: Colors.blueAccent),
              ),
              enabledBorder: const OutlineInputBorder(
                borderSide: BorderSide(color: Color(0xFF303030)),
              ),
              contentPadding: const EdgeInsets.all(16),
              suffixIcon: IconButton(
                icon: const Icon(Icons.search, color: Colors.white70),
                onPressed: _isAnalyzing ? null : _analyzeLink,
                tooltip: 'Analyze Link',
              ),
            ),
            validator: (value) {
              if (value == null || value.trim().isEmpty) {
                return 'Please enter a URL';
              } else if (!_isValidUrl(value.trim())) {
                return 'Please enter a valid URL';
              }
              return null;
            },
            autofocus: widget.initialUrl == null,
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _titleController,
            style: const TextStyle(color: Colors.white),
            decoration: const InputDecoration(
              labelText: 'Title',
              labelStyle: TextStyle(color: Colors.grey),
              border: OutlineInputBorder(),
              focusedBorder: OutlineInputBorder(
                borderSide: BorderSide(color: Colors.blueAccent),
              ),
              enabledBorder: OutlineInputBorder(
                borderSide: BorderSide(color: Color(0xFF303030)),
              ),
              contentPadding: EdgeInsets.all(16),
            ),
            validator: (value) {
              if (value == null || value.trim().isEmpty) {
                return 'Please enter a title';
              }
              return null;
            },
            autofocus: widget.initialUrl != null && widget.autofocusSave,
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _descriptionController,
            maxLines: 3,
            style: const TextStyle(color: Colors.white),
            decoration: const InputDecoration(
              labelText: 'Description (Optional)',
              labelStyle: TextStyle(color: Colors.grey),
              border: OutlineInputBorder(),
              focusedBorder: OutlineInputBorder(
                borderSide: BorderSide(color: Colors.blueAccent),
              ),
              enabledBorder: OutlineInputBorder(
                borderSide: BorderSide(color: Color(0xFF303030)),
              ),
              contentPadding: EdgeInsets.all(16),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFooter(AddCardState state) {
    final isLoading = state is AddCardLoading;

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
      decoration: const BoxDecoration(
        border: Border(top: BorderSide(color: Color(0xFF303030), width: 1)),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF303030),
            ),
            child: const Text('Cancel'),
          ),
          const SizedBox(width: 16),
          ElevatedButton(
            onPressed: !_isSaveEnabled || isLoading || _isAnalyzing
                ? null
                : () {
                    if (_formKey.currentState!.validate()) {
                      HapticFeedback.mediumImpact();
                      final now = DateTime.now().millisecondsSinceEpoch;

                      final card = CardEntity(
                        type: 'link',
                        content: _titleController.text.trim(),
                        body: _descriptionController.text.trim(),
                        url: _urlController.text.trim(),
                        spaceId: widget.spaceId, // Add to the specified space
                        createdAt: now,
                        updatedAt: now,
                      );

                      BlocProvider.of<AddCardBloc>(
                        context,
                      ).add(AddNewCard(card));
                    }
                  },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blueAccent,
              disabledBackgroundColor: Colors.blueAccent.withOpacity(0.3),
            ),
            child: isLoading
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      strokeWidth: 2,
                    ),
                  )
                : const Text('Save'),
          ),
        ],
      ),
    );
  }
}
